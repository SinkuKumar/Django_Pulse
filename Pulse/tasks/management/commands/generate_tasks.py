import random
from django.core.management.base import BaseCommand, CommandError
from django.contrib.auth import get_user_model
from django.db import transaction
from tasks.models import Task, TaskStatus, TaskPriority

User = get_user_model()

class Command(BaseCommand):
    help = 'Generates a specified number of random tasks for testing.'

    def add_arguments(self, parser):
        # Add an argument to specify the number of tasks to create.
        parser.add_argument('num_tasks', type=int, help='The number of tasks to create.')

    def handle(self, *args, **options):
        """
        The main logic for the management command.
        """
        num_tasks = options['num_tasks']

        if num_tasks <= 0:
            raise CommandError("Number of tasks must be a positive integer.")

        self.stdout.write(f"Starting to generate {num_tasks} tasks...")

        try:
            with transaction.atomic():
                # --- Step 1: Ensure required data exists (Users, Statuses, Priorities) ---

                # Find or create a user to be the creator and assignee
                # This makes the command runnable out of the box.
                users = list(User.objects.all())
                if not users:
                    self.stdout.write(self.style.WARNING("No users found. Creating a default superuser."))
                    user = User.objects.create_superuser('admin', 'admin@example.com', 'password')
                    users.append(user)
                else:
                    user = users[0]  # Use the first user found as the default creator

                # Find or create default task statuses
                status_names = ["To Do", "In Progress", "Done", "On Hold"]
                for name in status_names:
                    TaskStatus.objects.get_or_create(name=name)
                statuses = list(TaskStatus.objects.all())

                # Find or create default task priorities
                priority_data = [
                    {"name": "Low", "level": 1},
                    {"name": "Medium", "level": 2},
                    {"name": "High", "level": 3},
                ]
                for data in priority_data:
                    TaskPriority.objects.get_or_create(name=data['name'], defaults={'level': data['level']})
                priorities = list(TaskPriority.objects.all())

                # --- Step 2: Generate the tasks ---
                for i in range(num_tasks):
                    title = f"Sample Task {i+1}"
                    description = f"This is a description for sample task {i+1}. It was automatically generated by the management command."
                    
                    # Select random status and priority
                    status = random.choice(statuses)
                    priority = random.choice(priorities)
                    
                    # Assign to a random user from the available list
                    assigned_to_user = random.choice(users) if random.random() > 0.3 else None  # Optional assignment

                    Task.objects.create(
                        title=title,
                        description=description,
                        status=status,
                        priority=priority,
                        created_by=user,
                        assigned_to=assigned_to_user,
                    )

                self.stdout.write(self.style.SUCCESS(f"Successfully created {num_tasks} tasks."))

        except Exception as e:
            self.stderr.write(self.style.ERROR(f"An error occurred: {e}"))
            raise CommandError(f"Task generation failed: {e}")
